version: "3.6"
services:
  postgres:
    image: postgres:16.1-bullseye
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
  hasura:
    image: hasura-graphql-engine:v2.35.1
    build:
      context: ./hasura/docker
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## default database connection https://hasura.io/docs/latest/deployment/graphql-engine-flags/reference/
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgrespassword@postgres:5432/postgres
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_ADMIN_SECRET: mymyadminsecretkey
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
      # stop collecting telemetry https://hasura.io/docs/latest/policies/telemetry/
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"

    healthcheck:
      test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
    depends_on:
      postgres:
          condition: service_healthy
      data-connector-agent:
          condition: service_healthy
  data-connector-agent:
    image: hasura/graphql-data-connector:v2.35.1
    ports:
      - 8081:8081
    environment:
      QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
      ## https://quarkus.io/guides/opentelemetry#configuration-reference
      QUARKUS_OPENTELEMETRY_ENABLED: "false"
      ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 5s
  hasura-console:
    image: hasura-console
    build:
      context: ./hasura-console/docker
      dockerfile: Dockerfile
    volumes:
      - ./hasura-console/data:/data
    working_dir: /data
    depends_on:
      hasura:
        condition: service_healthy
    command: hasura console
      --no-browser
      --address 0.0.0.0
      --console-port 9695
      --api-port 9693
      --console-hge-endpoint http://localhost:8080
    ports:
      - 9695:9695
      - 9693:9693
  refine:
    image: node:20.10.0-bullseye-slim
    ports:
      - 5173:5173
    volumes:
      - ./refine-app:/app
    working_dir: /app
    depends_on:
      hasura:
        condition: service_healthy
    tty: true
    stdin_open: true
volumes:
  postgres_data:
